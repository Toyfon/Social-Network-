{"version":3,"sources":["components/common/FormContols/FormControl.module.css","components/common/FormContols/FormContrlols.tsx","assets/validators/validators.ts","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/PostForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","Redux/selectors/profile-selectors.ts","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Textarea","field","form","props","className","errors","name","s","formControlError","formControlNotError","validateTextArea","value","error","length","ProfileStatusWithHooks","React","memo","status","updateStatus","useState","editMode","setEditMode","localStatus","setLocalStatus","useEffect","onDoubleClick","onChange","e","currentTarget","onBlur","autoFocus","ProfileInfo","profile","isOwner","savePhoto","Preloader","descriptionBlock","src","photos","large","userPhoto","alt","type","target","files","contacts","github","instagram","fullName","lookingForAJobDescription","Post","message","likesCount","item","text","PostForm","addNewPost","initialValues","newPostText","onSubmit","values","setSubmitting","touched","placeholder","component","validate","errColor","MyPostsContainer","connect","state","posts","profilePage","dispatch","addPost","addPostAC","console","log","postElement","map","p","postBlock","Profile","getProfileSelector","getStatusSelector","getIdSelector","auth","id","getAuthSelector","isAuth","ProfileContainer","userId","this","match","params","String","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","withRouter"],"mappings":"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","file":"static/js/3.2a285ef6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlNotError\":\"FormControl_formControlNotError__1KcPq\",\"formControlError\":\"FormControl_formControlError__2KOeI\",\"errColor\":\"FormControl_errColor__1UPSn\"};","import s from './FormControl.module.css'\r\n\r\n\r\n// @ts-ignore\r\nexport const Textarea = ({field, form,...props}) => {\r\n// const showError = form.touched[field.name] &&\r\n    return <div className={ form.errors[field.name]  ?  s.formControlError : s.formControlNotError}>\r\n        <textarea {...field} {...props}/>\r\n    </div>\r\n}","export const validateTextArea = (value: string) => {\r\n    let error\r\n    if (!value) {\r\n        error = 'field is required'\r\n    }\r\n    if (value.length > 100) {\r\n        error = 'max length 100 symbols'\r\n    }\r\n    return error\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2CXYu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3s8Wv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3kqkm\",\"posts\":\"MyPosts_posts__2xG9D\",\"btn\":\"MyPosts_btn__1J5PD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2TOWI\",\"text\":\"Post_text__1ijr5\"};","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\r\nimport {Result} from \"../../../api/api\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\ntype ResponseType = {\r\n    status: string\r\n}\r\n\r\nexport type statusResponseType = Result<ResponseType>\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusType> = React.memo(({status, updateStatus}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [localStatus, setLocalStatus] = useState<string>(status)\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(localStatus)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLocalStatus(status)\r\n    }, [status])\r\n\r\n    return <div>\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateMode}>{status || 'no status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    onBlur={deactivateMode}\r\n                    autoFocus\r\n                    value={localStatus}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../Redux/profilePage-reducer\";\r\nimport userPhoto from './../../../assets/images/user.png'\r\n\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto:(photo: File | null)=> void\r\n}\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}: ProfileInfoPropsType) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onmMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files!.length) {\r\n            savePhoto(e.target.files![0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large !== null ? profile.photos.large : userPhoto} alt='UserPhoto'/>\r\n                {isOwner && <input type={'file'} onChange={onmMainPhotoSelected}/>}\r\n                <div> {profile.contacts.github}</div>\r\n                <div> {profile.contacts.instagram}</div>\r\n                <div> {profile.fullName}</div>\r\n                <div> {profile.lookingForAJobDescription}</div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import s from './Post.module.css';\r\nimport React from \"react\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostPropsType> = ({message,likesCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://www.blast.hk/attachments/68495/' alt=''/>\r\n            {message}\r\n            <div className={s.text}>\r\n                <span>like</span> {likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {FC} from \"react\";\r\nimport {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport {validateTextArea} from \"../../assets/validators/validators\";\r\nimport {Textarea} from \"../common/FormContols/FormContrlols\";\r\nimport s from './../common/FormContols/FormControl.module.css'\r\n\r\n\r\n\r\ntype FormType = {\r\n    newPostText: string\r\n}\r\n\r\ntype PostPropsType = {\r\n    addNewPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nexport const PostForm: FC<PostPropsType> = React.memo(({addNewPost}) => {\r\n\r\n    const initialValues: FormType = {newPostText: ''}\r\n    const submit = (values: FormType, {setSubmitting}: FormikHelpers<FormType>) => {\r\n        addNewPost(values.newPostText)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={initialValues}\r\n                onSubmit={submit}>\r\n            {({errors, touched}) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field placeholder=\"Enter your post\"\r\n                               name='newPostText'\r\n                               component={Textarea}\r\n                               validate={validateTextArea}/>\r\n                        {errors.newPostText && touched.newPostText && <div className={s.errColor}>{errors.newPostText}</div>}\r\n                    </div>\r\n                    <div>\r\n                        <button>Add</button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import {addPostAC} from \"../../../Redux/profilePage-reducer\";\r\nimport {RootReducerType} from \"../../../Redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\n\r\n\r\nlet mapStateToProps = (state: RootReducerType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText:string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {PostsType} from \"../../../Redux/profilePage-reducer\";\r\nimport {PostForm} from \"../PostForm\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (post: string) => void\r\n}\r\n\r\nexport const MyPosts = ({posts,addPost}: MyPostsPropsType) => {\r\n    console.log(\"render\")\r\n    let postElement = posts.map((p) =>\r\n        <Post message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let addNewPost = (newPostText: string) => {\r\n        addPost(newPostText)\r\n    }\r\n\r\n    return <div>\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <PostForm addNewPost={addNewPost}/>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElement}\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\n","import s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport React, {FC} from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Redux/profilePage-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner:boolean\r\n    savePhoto: (photo: File | null) => void\r\n}\r\n\r\nconst Profile:FC<ProfilePropsType> = ({profile,status,updateStatus,isOwner,savePhoto,...props}) => {\r\n\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         isOwner={isOwner}\r\n                         savePhoto={savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile","import {RootReducerType} from \"../redux-store\";\r\nimport {ProfileType} from \"../profilePage-reducer\";\r\n\r\nexport const  getProfileSelector = (state:RootReducerType):ProfileType | null => state.profilePage.profile\r\nexport const  getStatusSelector = (state:RootReducerType):string => state.profilePage.status\r\nexport const  getIdSelector = (state:RootReducerType):number | null => state.auth.id\r\nexport const  getAuthSelector = (state:RootReducerType):boolean => state.auth.isAuth","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducerType} from \"../../Redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfileType, savePhoto, updateStatus} from \"../../Redux/profilePage-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getAuthSelector,\r\n    getIdSelector,\r\n    getProfileSelector,\r\n    getStatusSelector\r\n} from \"../../Redux/selectors/profile-selectors\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    id: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto:(photo: File | null) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ProfileContainerPropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype OwnPropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<OwnPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.id!)\r\n            // if (userId) {\r\n            //     this.props.history.push('/login') // системный редирект (не желателен, потому что вмешиваемся в жизненный цикл компоненты// )\r\n            // }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<OwnPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        // eslint-disable-next-line no-self-compare\r\n        // if (this.props.match.params.userId !== this.props.match.params.userId) {\r\n        this.refreshProfile()\r\n        //}\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootReducerType): mapStateToPropsType => ({\r\n    profile: getProfileSelector(state),\r\n    status: getStatusSelector(state),\r\n    id: getIdSelector(state),\r\n    isAuth: getAuthSelector(state)\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}