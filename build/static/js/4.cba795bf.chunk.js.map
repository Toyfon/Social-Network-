{"version":3,"sources":["components/common/FormContols/FormControl.module.css","components/Dialogs/Dialogs.module.css","components/common/FormContols/FormContrlols.tsx","assets/validators/validators.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"names":["module","exports","Textarea","field","form","props","className","errors","name","s","formControlError","formControlNotError","validateTextArea","value","error","length","DialogItem","id","path","dialog","active","src","alt","to","Message","message","DialogsForm","React","memo","addNewMessage","initialValues","newMessageBody","onSubmit","values","setSubmitting","touched","placeholder","component","validate","errColor","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","sendMessageCreator","Component","restProps","updateNewMassageBody","dialogsElements","dialogs","map","d","messagesElements","messages","m","useCallback","dialogsItems"],"mappings":"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","file":"static/js/4.cba795bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControlNotError\":\"FormControl_formControlNotError__1KcPq\",\"formControlError\":\"FormControl_formControlError__2KOeI\",\"errColor\":\"FormControl_errColor__1UPSn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__27D36\",\"dialogsItems\":\"Dialogs_dialogsItems__3tYnw\",\"active\":\"Dialogs_active__30YPW\",\"messages\":\"Dialogs_messages__2Fq3i\",\"dialog\":\"Dialogs_dialog__1yS1n\",\"message\":\"Dialogs_message__2GrU0\"};","import s from './FormControl.module.css'\r\n\r\n\r\n// @ts-ignore\r\nexport const Textarea = ({field, form,...props}) => {\r\n// const showError = form.touched[field.name] &&\r\n    return <div className={ form.errors[field.name]  ?  s.formControlError : s.formControlNotError}>\r\n        <textarea {...field} {...props}/>\r\n    </div>\r\n}","export const validateTextArea = (value: string) => {\r\n    let error\r\n    if (!value) {\r\n        error = 'field is required'\r\n    }\r\n    if (value.length > 100) {\r\n        error = 'max length 100 symbols'\r\n    }\r\n    return error\r\n}\r\n\r\n\r\n","import s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\ntype dialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n export const DialogItem: React.FC<dialogItemPropsType> = ({name,id,...props}) => {\r\n    let path = \"/dialogs/\" + id\r\n    return (\r\n     <div className={s.dialog + ' ' + s.active}>\r\n         <img src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTxoVYK9gVqDWkfv3blKuxWEO0t9JrH6XSjxg&usqp=CAU' alt=\"\"/>\r\n         <div>\r\n        <NavLink to={path}>{name}</NavLink>\r\n    </div>\r\n     </div>\r\n    )\r\n}\r\n\r\n\r\n","import s from './../Dialogs.module.css'\r\nimport React from \"react\";\r\n\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n export const Message: React.FC<MessagePropsType> = ({message,...props}) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <div className={s.message}>\r\n            {message}\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {FC} from \"react\";\r\nimport {Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport {Textarea} from \"../common/FormContols/FormContrlols\";\r\nimport s from \"../common/FormContols/FormControl.module.css\";\r\nimport {validateTextArea} from \"../../assets/validators/validators\";\r\n\r\ntype FormType = {\r\n    newMessageBody: string\r\n}\r\n\r\ntype DialogsPropsType = {\r\n    addNewMessage: (values: string) => void\r\n}\r\n\r\nexport const DialogsForm: FC<DialogsPropsType> = React.memo(({addNewMessage, ...props}) => {\r\n    const initialValues: FormType = {newMessageBody: ''}\r\n    const submit = (values: FormType, {setSubmitting}: FormikHelpers<FormType>) => {\r\n        addNewMessage(values.newMessageBody)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={initialValues}\r\n                onSubmit={submit}>\r\n            {({errors, touched}) => (\r\n            <Form>\r\n                <div>\r\n                    <Field placeholder=\"Enter your message\"\r\n                           name='newMessageBody'\r\n                           component={Textarea}\r\n                           validate={validateTextArea}\r\n                    />\r\n                    {errors.newMessageBody && touched.newMessageBody && <div className={s.errColor}>{errors.newMessageBody}</div>}\r\n                </div>\r\n                <div>\r\n                    <button>send</button>\r\n                </div>\r\n            </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n} )","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {RootReducerType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootReducerType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n","import {compose, Dispatch} from \"redux\";\r\nimport {RootReducerType} from \"../../Redux/redux-store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {sendMessageCreator} from \"../../Redux/dialogsPage-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\n\r\nlet mapStateToProps = (state: RootReducerType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)\r\n(Dialogs)","import s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport React, {useCallback} from \"react\";\r\nimport {InitialDialogsPageStateType} from \"../../Redux/dialogsPage-reducer\";\r\nimport {DialogsForm} from \"./DialogsForm\";\r\n\r\ntype DialogsType = {\r\n    dialogsPage: InitialDialogsPageStateType\r\n    updateNewMassageBody: (body: string) => void\r\n    sendMessage: (values: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsType> = ({dialogsPage,\r\n                                                   updateNewMassageBody,\r\n                                                   sendMessage,\r\n                                                   isAuth,...props}) => {\r\n\r\n    let state = dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElements = state.messages.map((m) => <Message key={m.id} message={m.message}/>)\r\n\r\n    let addNewMessage = useCallback((newMessageBody: string) => {\r\n        sendMessage(newMessageBody)\r\n    }, [sendMessage])\r\n\r\n    /*    if (!props.isAuth) return <Redirect to={'/login'}/>*/\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <DialogsForm addNewMessage={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n"],"sourceRoot":""}